[gd_scene load_steps=10 format=2]

[ext_resource path="res://boids/BoidsInstance.tscn" type="PackedScene" id=1]
[ext_resource path="res://Sliders.tscn" type="PackedScene" id=2]
[ext_resource path="res://boids/BoidsSpec.gd" type="Script" id=3]
[ext_resource path="res://boids/BoidsScene.gd" type="Script" id=4]
[ext_resource path="res://assets/golf-flag.png" type="Texture" id=9]

[sub_resource type="Resource" id=18]
resource_local_to_scene = true
script = ExtResource( 3 )
world_size = Vector2( 1000, 1000 )
velocity_min = 30.0
velocity_max = 100.0
grid_resolution = 1.0
boids_capacity = 16384
boids_size = 10.0
boids_vision = 40.0
rule_cohesion = 50.0
rule_seperation = 400.0
rule_alignment = 1.3
rule_target = 5.0
rule_colision = 100.0
grid_power = 1.5
seperation_power = 1.5

[sub_resource type="GDScript" id=16]
script/source = "extends Control

signal clicked(position, index)

const stretch_shrink := 1.0

func _draw():
    draw_rect(Rect2(Vector2(0,0), rect_size), Color(1,1,1,1), false, 1.0)

func set_target(position : Vector2):
    if position:
        $TargetSprite.position = position
        $TargetSprite.visible = true
    else:
        $TargetSprite.visible = false

func _on_VPC_Grid_gui_input(event):
    if(get_rect().has_point(event.position)):
        var button_event := event as InputEventMouseButton
        if button_event and button_event.pressed:
            emit_signal(\"clicked\", button_event.position, button_event.button_index)
"

[sub_resource type="GDScript" id=9]
script/source = "extends TextureRect

const stretch_shrink := 5.0

func _draw():
    draw_rect(Rect2(Vector2(0,0), rect_size), Color(1,1,1,1), false, 1.0)

func _input(event):
    var mouse := event as InputEventMouseMotion
    if mouse:
        mouse = make_input_local(mouse)
        var pos := mouse.position / stretch_shrink
        var x := int(pos.x)
        var y := int(pos.y)
        if Rect2(Vector2(0,0), self.rect_min_size).has_point(pos):
            $Cursor_Label.visible = true
            $Cursor_Label.rect_position = mouse.position - Vector2(0, $Cursor_Label.rect_size.y)
            $Cursor_Label.text = \"X,Y=\" +  str(x) + \",\" + str(y)
            
            var image : Image = get_texture().get_data()
            $Cursor_Label.text += \"\\nU,V=\" +  str(pos.x / image.get_width()) + \",\" + str(pos.y / image.get_height())
            
            image.lock()
            var pixel := image.get_pixel(x, image.get_height() - y - 1)
            image.unlock()
            $Cursor_Label.text += \"\\nR=\" + str(int(pixel.r * 255))
            $Cursor_Label.text += \"\\nG=\" + str(int(pixel.g * 255))
            $Cursor_Label.text += \"\\nB=\" + str(int(pixel.b * 255))
            $Cursor_Label.text += \"\\nA=\" + str(int(pixel.a * 255))
            
        else:
            $Cursor_Label.visible = false
    
"

[sub_resource type="GDScript" id=17]
script/source = "extends TextureRect

const stretch_shrink := 5.0

func _draw():
    draw_rect(Rect2(Vector2(0,0), rect_size), Color(1,1,1,1), false, 1.0)
"

[node name="BoidsScene" type="HBoxContainer"]
size_flags_horizontal = 3
size_flags_vertical = 3
script = ExtResource( 4 )

[node name="BoidsInstance" parent="." instance=ExtResource( 1 )]
boids_spec = SubResource( 18 )

[node name="Sliders" parent="." instance=ExtResource( 2 )]

[node name="Container" type="VBoxContainer" parent="."]
margin_left = 4.0
margin_right = 404.0
margin_bottom = 180.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Label_Boids" type="Label" parent="Container"]
margin_right = 400.0
margin_bottom = 14.0

[node name="Label_Grid" type="Label" parent="Container"]
margin_top = 18.0
margin_right = 400.0
margin_bottom = 32.0
rect_min_size = Vector2( 0, 10 )
size_flags_horizontal = 3
text = "Grid (holds occupancy data and direction vectors):"

[node name="VPC_Grid" type="TextureRect" parent="Container"]
margin_top = 36.0
margin_bottom = 36.0
size_flags_horizontal = 0
size_flags_vertical = 0
stretch_mode = 5
flip_v = true
script = SubResource( 16 )

[node name="TargetSprite" type="Sprite" parent="Container/VPC_Grid"]
visible = false
modulate = Color( 1, 0, 0, 1 )
scale = Vector2( 0.0743966, 0.0743966 )
texture = ExtResource( 9 )
offset = Vector2( 0, -160 )

[node name="Label_State" type="Label" parent="Container"]
margin_top = 40.0
margin_right = 400.0
margin_bottom = 54.0
rect_min_size = Vector2( 0, 10 )
size_flags_horizontal = 3
text = "State (holds particle data (pos, speed)): "

[node name="VPC_State" type="TextureRect" parent="Container"]
margin_top = 58.0
margin_right = 400.0
margin_bottom = 158.0
rect_min_size = Vector2( 400, 100 )
size_flags_horizontal = 0
stretch_mode = 5
script = SubResource( 9 )

[node name="Cursor_Label" type="Label" parent="Container/VPC_State"]
margin_right = 40.0
margin_bottom = 14.0

[node name="Label_Copy" type="Label" parent="Container"]
margin_top = 162.0
margin_right = 400.0
margin_bottom = 176.0
rect_min_size = Vector2( 0, 10 )
size_flags_horizontal = 3
text = "Copy (used to backcopy \"State\" for reading): "

[node name="VPC_Copy" type="TextureRect" parent="Container"]
margin_top = 180.0
margin_bottom = 180.0
size_flags_horizontal = 0
stretch_mode = 5
script = SubResource( 17 )

[connection signal="clicked" from="Container/VPC_Grid" to="." method="_on_VPC_Grid_clicked"]
[connection signal="gui_input" from="Container/VPC_Grid" to="Container/VPC_Grid" method="_on_VPC_Grid_gui_input"]
